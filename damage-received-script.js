function initDamageReceivedForm() {
    const form = document.getElementById('damage-received-form');
    if (!form) return;

    form.innerHTML = `
        <div class="form-header">
            <h3>T√≠nh to√°n s√°t th∆∞∆°ng nh·∫≠n v√†o</h3>
            <button type="button" id="damage-received-help" class="help-button">Help</button>
        </div>

        <h3>Th√¥ng tin ng∆∞·ªùi t·∫•n c√¥ng</h3>
        <label for="attacker-damage">S√°t th∆∞∆°ng ng∆∞·ªùi t·∫•n c√¥ng:</label>
        <input type="number" id="attacker-damage" required min="0" placeholder="Nh·∫≠p s√°t th∆∞∆°ng c·ªßa ng∆∞·ªùi t·∫•n c√¥ng">
        
        <div class="checkbox-group">
            <label><input type="checkbox" id="effect-cdd"> CDD</label>
            <label><input type="checkbox" id="effect-true-damage"> True Damage</label>
            <label><input type="checkbox" id="effect-piercing"> Piercing Damage</label>
        </div>
        
        <label for="attack-element">H·ªá c·ªßa ƒë√≤n t·∫•n c√¥ng:</label>
        <select id="attack-element" required>
            <option value="">Ch·ªçn h·ªá</option>
            <option value="Force">Force</option>
            <option value="Flame">Flame</option>
            <option value="Aqua">Aqua</option>
            <option value="Gale">Gale</option>
            <option value="Terra">Terra</option>
            <option value="Holy">Holy</option>
            <option value="Shadow">Shadow</option>
        </select>

        <h3>Th√¥ng tin ng∆∞·ªùi nh·∫≠n s√°t th∆∞∆°ng</h3>
        <p>Ng∆∞·ªùi nh·∫≠n s√°t th∆∞∆°ng c√≥ hi·ªáu ·ª©ng:</p>
        <div class="checkbox-group">
            <label><input type="checkbox" id="negate-cdd"> Negate CDD</label>
            <label><input type="checkbox" id="negate-true-damage"> Negate True Damage</label>
            <label><input type="checkbox" id="negate-piercing"> Negate Piercing Damage</label>
        </div>

        <h4>1. Gi·∫£m s√°t th∆∞∆°ng nh·∫≠n v√†o c·ªë ƒë·ªãnh</h4>
        
        <label for="own-attack-count">S·ªë l∆∞·ª£ng ƒë√≤n t·∫•n c√¥ng c·ªßa b·∫£n th√¢n:</label>
        <div class="input-wrapper">
            <input type="number" id="own-attack-count" min="0">
            <span class="input-message" id="own-attack-count-message"></span>
        </div>
        <div id="own-attack-inputs"></div>
        
        <label for="shield-terrain-count">S·ªë l∆∞·ª£ng v·∫≠t c·∫£n (khi√™n, fake HP, ƒë·ªãa h√¨nh):</label>
        <div class="input-wrapper">
            <input type="number" id="shield-terrain-count" min="0">
            <span class="input-message" id="shield-terrain-count-message"></span>
        </div>
        <div id="shield-terrain-inputs"></div>
        
        <label for="reduce-def">Def c·ªßa b·∫£n th√¢n:</label>
        <div class="input-wrapper">
            <input type="number" id="reduce-def" min="0">
            <span class="input-message" id="reduce-def-message"></span>
        </div>

        <h4>2. Gi·∫£m s√°t th∆∞∆°ng nh·∫≠n v√†o theo t·ªâ l·ªá</h4>
        <label for="damage-reduction-count">S·ªë l∆∞·ª£ng gi·∫£m s√°t th∆∞∆°ng theo t·ªâ l·ªá:</label>
        <div class="input-wrapper">
            <input type="number" id="damage-reduction-count" min="0">
            <span class="input-message" id="damage-reduction-count-message"></span>
        </div>
        <div id="damage-reduction-inputs"></div>

        <label for="elemental-affinity" id="elemental-affinity-label">Elemental Affinity:</label>
        <input type="number" id="elemental-affinity" step="0.01" value="1" placeholder="Nh·∫≠p h·ªá s·ªë Elemental Affinity (m·∫∑c ƒë·ªãnh: 1)">
    `;

    form.addEventListener('input', calculateDamageReceived);
    form.addEventListener('change', calculateDamageReceived);

    document.getElementById('own-attack-count').addEventListener('input', updateOwnAttackInputs);
    document.getElementById('shield-terrain-count').addEventListener('input', updateShieldTerrainInputs);
    document.getElementById('damage-reduction-count').addEventListener('input', updateDamageReductionInputs);
    document.getElementById('attack-element').addEventListener('change', updateElementalAffinityLabel);
    document.getElementById('damage-received-help').addEventListener('click', showDamageReceivedHelp);

    updateInputStates();
    updateOwnAttackInputs();
    updateShieldTerrainInputs();
    updateDamageReductionInputs();
    updateElementalAffinityLabel();
    document.getElementById('calculation-result').style.display = 'none';
}

function showDamageReceivedHelp() {
    const helpContent = `
        <div style="background: linear-gradient(45deg, #2c3e50, #34495e); color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px;">
            <h3 style="text-align: center; margin: 0; color: #ecf0f1;">üõ°Ô∏è H∆∞·ªõng D·∫´n T√≠nh To√°n S√°t Th∆∞∆°ng Nh·∫≠n V√†o üõ°Ô∏è</h3>
        </div>

        <p style="font-size: 18px; color: #2c3e50; text-align: center; margin-bottom: 20px;">
            <strong>C√¥ng c·ª• n√†y gi√∫p b·∫°n t√≠nh to√°n ch√≠nh x√°c s√°t th∆∞∆°ng nh·∫≠n v√†o, xem x√©t m·ªçi y·∫øu t·ªë t·ª´ ng∆∞·ªùi t·∫•n c√¥ng ƒë·∫øn kh·∫£ nƒÉng ph√≤ng th·ªß c·ªßa b·∫°n!</strong>
        </p>

        <h3 style="color: #c0392b; border-bottom: 2px solid #c0392b; padding-bottom: 5px;">üó°Ô∏è Th√¥ng Tin Ng∆∞·ªùi T·∫•n C√¥ng</h3>
        <ul style="list-style-type: none; padding-left: 20px; color: #34495e;">
            <li>üî¢ <strong>S√°t th∆∞∆°ng:</strong> Nh·∫≠p gi√° tr·ªã s√°t th∆∞∆°ng g·ªëc c·ªßa k·∫ª t·∫•n c√¥ng.</li>
            <li>üåü <strong>Hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát:</strong>
                <ul>
                    <li>üîÅ <strong>CDD:</strong> S√°t th∆∞∆°ng duy tr√¨, c√≥ th·ªÉ xuy√™n qua m·ªôt s·ªë ph√≤ng th·ªß.</li>
                    <li>üíØ <strong>True Damage:</strong> S√°t th∆∞∆°ng th·∫≠t, b·ªè qua m·ªçi gi·∫£m thi·ªÉu % v√† Elemental Affinity.</li>
                    <li>üéØ <strong>Piercing:</strong> S√°t th∆∞∆°ng xuy√™n gi√°p, b·ªè qua ph√≤ng th·ªß c·ªë ƒë·ªãnh.</li>
                </ul>
            </li>
            <li>üåà <strong>H·ªá t·∫•n c√¥ng:</strong> Ch·ªçn h·ªá c·ªßa ƒë√≤n t·∫•n c√¥ng (·∫£nh h∆∞·ªüng t·ªõi Elemental Affinity).</li>
        </ul>

        <h3 style="color: #2980b9; border-bottom: 2px solid #2980b9; padding-bottom: 5px;">üõ°Ô∏è Th√¥ng Tin Ng∆∞·ªùi Nh·∫≠n S√°t Th∆∞∆°ng</h3>
        <ul style="list-style-type: none; padding-left: 20px; color: #34495e;">
            <li>üö´ <strong>Hi·ªáu ·ª©ng ph√≤ng th·ªß:</strong> Ch·ªçn c√°c hi·ªáu ·ª©ng v√¥ hi·ªáu h√≥a s√°t th∆∞∆°ng ƒë·∫∑c bi·ªát.</li>
            <li>üõë <strong>Gi·∫£m s√°t th∆∞∆°ng c·ªë ƒë·ªãnh:</strong>
                <ul>
                    <li>‚öîÔ∏è S·ªë ƒë√≤n t·∫•n c√¥ng ph·∫£n l·∫°i</li>
                    <li>üè∞ S·ªë l∆∞·ª£ng v·∫≠t c·∫£n (khi√™n, fake HP, ƒë·ªãa h√¨nh)</li>
                    <li>üõ°Ô∏è Ch·ªâ s·ªë Def c·ªßa b·∫°n</li>
                </ul>
            </li>
            <li>üìâ <strong>Gi·∫£m s√°t th∆∞∆°ng theo %:</strong> Nh·∫≠p s·ªë l∆∞·ª£ng v√† gi√° tr·ªã % gi·∫£m s√°t th∆∞∆°ng.</li>
            <li>üîÆ <strong>Elemental Affinity:</strong> H·ªá s·ªë kh√°ng/y·∫øu v·ªõi h·ªá t·∫•n c√¥ng (< 1: kh√°ng, > 1: y·∫øu, < 0: h·∫•p th·ª•).</li>
        </ul>

        <div style="background-color: #e67e22; color: white; padding: 15px; border-radius: 5px; margin-top: 20px;">
            <p style="margin: 0; text-align: center; font-weight: bold;">
                ‚ö†Ô∏è L∆∞u √ù: H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t√≠nh to√°n s√°t th∆∞∆°ng cu·ªëi c√πng d·ª±a tr√™n t·∫•t c·∫£ th√¥ng tin b·∫°n cung c·∫•p! ‚ö†Ô∏è
            </p>
        </div>
    `;

    showModal('H∆∞·ªõng D·∫´n T√≠nh S√°t Th∆∞∆°ng Nh·∫≠n V√†o', helpContent);
}

function updateElementalAffinityLabel() {
    const attackElement = document.getElementById('attack-element').value;
    const label = document.getElementById('elemental-affinity-label');
    const input = document.getElementById('elemental-affinity');
    
    if (attackElement) {
        const elementName = getElementName(attackElement);
        label.textContent = `${elementName} Affinity:`;
        input.placeholder = `Nh·∫≠p h·ªá s·ªë ${elementName} Affinity (m·∫∑c ƒë·ªãnh: 1)`;
    } else {
        label.textContent = 'Elemental Affinity:';
        input.placeholder = 'Nh·∫≠p h·ªá s·ªë Elemental Affinity (m·∫∑c ƒë·ªãnh: 1)';
    }
}

function updateOwnAttackInputs() {
    const count = parseInt(document.getElementById('own-attack-count').value);
    const container = document.getElementById('own-attack-inputs');
    container.innerHTML = '';

    if (isNaN(count) || count <= 0) return;

    for (let i = 0; i < count; i++) {
        const label = i === 0 ? 'S√°t th∆∞∆°ng c·ªßa ƒë√≤n t·∫•n c√¥ng:' : `Gi·∫£m s√°t th∆∞∆°ng b·∫±ng ƒë√≤n t·∫•n c√¥ng ${i + 1}:`;
        const placeholder = i === 0 ? 'Nh·∫≠p s√°t th∆∞∆°ng c·ªßa ƒë√≤n t·∫•n c√¥ng' : `Nh·∫≠p gi·∫£m s√°t th∆∞∆°ng c·ªßa ƒë√≤n ${i + 1}`;
        container.innerHTML += `
            <label for="own-attack-${i}">${label}</label>
            <div class="input-wrapper">
                <input type="number" id="own-attack-${i}" min="0" class="own-attack-input" placeholder="${placeholder}" data-original-placeholder="${placeholder}">
                <span class="input-message" id="own-attack-${i}-message"></span>
            </div>
        `;
    }
    updateInputStates();
    calculateDamageReceived();
}

function updateShieldTerrainInputs() {
    const count = parseInt(document.getElementById('shield-terrain-count').value);
    const container = document.getElementById('shield-terrain-inputs');
    container.innerHTML = '';

    if (isNaN(count) || count <= 0) return;

    for (let i = 0; i < count; i++) {
        const label = i === 0 ? 'ƒê·ªô b·ªÅn v·∫≠t c·∫£n 1:' : `Gi·∫£m s√°t th∆∞∆°ng b·∫±ng v·∫≠t c·∫£n ${i + 1}:`;
        const placeholder = i === 0 ? 'Nh·∫≠p ƒë·ªô b·ªÅn c·ªßa v·∫≠t c·∫£n 1' : `Nh·∫≠p gi·∫£m s√°t th∆∞∆°ng c·ªßa v·∫≠t c·∫£n ${i + 1}`;
        container.innerHTML += `
            <label for="shield-terrain-${i}">${label}</label>
            <div class="input-wrapper">
                <input type="number" id="shield-terrain-${i}" min="0" class="shield-terrain-input" placeholder="${placeholder}" data-original-placeholder="${placeholder}">
                <span class="input-message" id="shield-terrain-${i}-message"></span>
            </div>
        `;
    }
    updateInputStates();
    calculateDamageReceived();
}

function updateDamageReductionInputs() {
    const count = parseInt(document.getElementById('damage-reduction-count').value);
    const container = document.getElementById('damage-reduction-inputs');
    container.innerHTML = '';

    if (isNaN(count) || count <= 0) return;

    for (let i = 0; i < count; i++) {
        const placeholder = 'Nh·∫≠p % gi·∫£m s√°t th∆∞∆°ng (0-100)';
        container.innerHTML += `
            <label for="damage-reduction-${i}">Gi·∫£m s√°t th∆∞∆°ng ${i + 1} (%):</label>
            <div class="input-wrapper">
                <input type="number" id="damage-reduction-${i}" min="0" max="100" class="damage-reduction-input" placeholder="${placeholder}" data-original-placeholder="${placeholder}">
                <span class="input-message" id="damage-reduction-${i}-message"></span>
            </div>
        `;
    }
    updateInputStates();
    calculateDamageReceived();
}

function updateInputStates() {
    const isCDD = document.getElementById('effect-cdd').checked;
    const isTrueDamage = document.getElementById('effect-true-damage').checked;
    const isPiercing = document.getElementById('effect-piercing').checked;
    const negateCDD = document.getElementById('negate-cdd').checked;
    const negateTrueDamage = document.getElementById('negate-true-damage').checked;
    const negatePiercing = document.getElementById('negate-piercing').checked;

    const ownAttackCount = document.getElementById('own-attack-count');
    const shieldTerrainCount = document.getElementById('shield-terrain-count');
    const damageReductionCount = document.getElementById('damage-reduction-count');
    const ownAttackInputs = document.querySelectorAll('.own-attack-input');
    const shieldTerrainInputs = document.querySelectorAll('.shield-terrain-input');
    const reduceDef = document.getElementById('reduce-def');
    const damageReductionInputs = document.querySelectorAll('.damage-reduction-input');
    const elementalAffinityInput = document.getElementById('elemental-affinity');

    const effectivePiercing = isPiercing && !negatePiercing;
    const effectiveTrueDamage = isTrueDamage && !negateTrueDamage;

    function updateInputAndMessage(input, messageElement, isDisabled, message) {
        input.disabled = isDisabled;
        input.style.backgroundColor = isDisabled ? '#f0f0f0' : '';
        messageElement.textContent = isDisabled ? message : '';
    }

    updateInputAndMessage(ownAttackCount, document.getElementById('own-attack-count-message'), effectivePiercing, 'ƒê√≤n t·∫•n c√¥ng c√≥ piercing damage, ph·∫ßn n√†y b·ªã b·ªè qua');
    updateInputAndMessage(shieldTerrainCount, document.getElementById('shield-terrain-count-message'), effectivePiercing, 'ƒê√≤n t·∫•n c√¥ng c√≥ hi·ªáu ·ª©ng Piercing, ph·∫ßn n√†y b·ªã b·ªè qua');
    updateInputAndMessage(damageReductionCount, document.getElementById('damage-reduction-count-message'), effectiveTrueDamage, 'ƒê√≤n t·∫•n c√¥ng c√≥ hi·ªáu ·ª©ng True Damage, ph·∫ßn n√†y b·ªã b·ªè qua');

    const fixedReductionInputs = [...ownAttackInputs, ...shieldTerrainInputs, reduceDef];
    fixedReductionInputs.forEach(input => {
        const messageElement = document.getElementById(`${input.id}-message`);
        updateInputAndMessage(input, messageElement, effectivePiercing, 'ƒê√≤n t·∫•n c√¥ng c√≥ hi·ªáu ·ª©ng Piercing, ph·∫ßn n√†y b·ªã b·ªè qua');
    });

    damageReductionInputs.forEach(input => {
        const messageElement = document.getElementById(`${input.id}-message`);
        updateInputAndMessage(input, messageElement, effectiveTrueDamage, 'ƒê√≤n t·∫•n c√¥ng c√≥ hi·ªáu ·ª©ng True Damage, ph·∫ßn n√†y b·ªã b·ªè qua');
    });

    elementalAffinityInput.disabled = false;
    elementalAffinityInput.style.backgroundColor = '';
    elementalAffinityInput.min = effectiveTrueDamage ? "1" : "-999";
    if (effectiveTrueDamage && parseFloat(elementalAffinityInput.value) < 1) {
        elementalAffinityInput.value = "1";
    }
    elementalAffinityInput.placeholder = effectiveTrueDamage ? 'T·ªëi thi·ªÉu l√† 1 do True Damage' : 'Nh·∫≠p h·ªá s·ªë Elemental Affinity (m·∫∑c ƒë·ªãnh: 1)';
}

function calculateDamageReceived() {
    const attackerDamage = parseFloat(document.getElementById('attacker-damage').value) || 0;
    const attackElement = document.getElementById('attack-element').value;
    
    if (attackerDamage === 0 || !attackElement) {
        updateInputStates();
        return;
    }

    const isCDD = document.getElementById('effect-cdd').checked;
    const isTrueDamage = document.getElementById('effect-true-damage').checked;
    const isPiercing = document.getElementById('effect-piercing').checked;
    const negateCDD = document.getElementById('negate-cdd').checked;
    const negateTrueDamage = document.getElementById('negate-true-damage').checked;
    const negatePiercing = document.getElementById('negate-piercing').checked;

    const effectiveCDD = isCDD && !negateCDD;
    const effectiveTrueDamage = isTrueDamage && !negateTrueDamage;
    const effectivePiercing = isPiercing && !negatePiercing;

    const ownAttackInputs = document.querySelectorAll('.own-attack-input');
    const shieldTerrainInputs = document.querySelectorAll('.shield-terrain-input');
    const reduceDef = parseFloat(document.getElementById('reduce-def').value) || 0;

    let totalOwnAttackReduction = 0;
    let allOwnAttacksLessThanDamage = true;
    ownAttackInputs.forEach(input => {
        const value = parseFloat(input.value) || 0;
        if (value >= attackerDamage) {
            allOwnAttacksLessThanDamage = false;
        }
        totalOwnAttackReduction += value;
    });

    let totalShieldTerrainReduction = 0;
    let allShieldTerrainLessThanDamage = true;
    shieldTerrainInputs.forEach(input => {
        const value = parseFloat(input.value) || 0;
        if (value >= attackerDamage) {
            allShieldTerrainLessThanDamage = false;
        }
        totalShieldTerrainReduction += value;
    });

    const damageReductionInputs = document.querySelectorAll('.damage-reduction-input');
    let A = 1;
    damageReductionInputs.forEach(input => {
        const value = parseFloat(input.value) || 0;
        A *= (1 - value / 100);
    });
    A = 1 - A;
    
    let B = reduceDef;
    if (!effectiveCDD || !allOwnAttacksLessThanDamage) {
        B += totalOwnAttackReduction;
    }
    if (!effectiveCDD || !allShieldTerrainLessThanDamage) {
        B += totalShieldTerrainReduction;
    }
    
    let C = parseFloat(document.getElementById('elemental-affinity').value) || 1;
    const elementName = getElementName(attackElement);

    let finalDamage = attackerDamage;

    if (!effectiveTrueDamage) {
        finalDamage *= (1 - A);
    }

    if (!effectivePiercing) {
        finalDamage -= B;
    }

    finalDamage = Math.max(0, finalDamage);
    finalDamage *= C;

    updateInputStates();
    
    let resultHTML = `
        <h3>K·∫øt qu·∫£ t√≠nh s√°t th∆∞∆°ng nh·∫≠n v√†o:</h3>
        <p>S√°t th∆∞∆°ng ban ƒë·∫ßu (Dmg): ${attackerDamage}</p>
        <p>H·ªá c·ªßa ƒë√≤n t·∫•n c√¥ng: <strong>${elementName}</strong></p>
        <p>Hi·ªáu ·ª©ng: ${effectiveCDD ? 'CDD, ' : ''}${effectiveTrueDamage ? 'True Damage, ' : ''}${effectivePiercing ? 'Piercing, ' : ''}</p>
        <h4>C√°c th√¥ng s·ªë:</h4>
        <p>A: Gi·∫£m s√°t th∆∞∆°ng nh·∫≠n v√†o theo t·ªâ l·ªá = ${(A * 100).toFixed(2)}% ${effectiveTrueDamage ? '(Kh√¥ng √°p d·ª•ng do True Damage)' : ''}</p>
        <p>B: Gi·∫£m s√°t th∆∞∆°ng nh·∫≠n v√†o c·ªë ƒë·ªãnh = ${B} ${effectivePiercing ? '(Kh√¥ng √°p d·ª•ng do Piercing)' : ''}</p>
        <p>C: ${elementName} Affinity = ${C.toFixed(2)}</p>
        <h4>C√¥ng th·ª©c t√≠nh:</h4>
        <p>Final Dmg = (Dmg ${effectiveTrueDamage ? '' : 'x (1-A)'} ${effectivePiercing ? '' : '- B'}) x C</p>
    `;

    if (C >= 0) {
        resultHTML += `<p><strong>S√°t th∆∞∆°ng cu·ªëi c√πng nh·∫≠n v√†o: <span style="color: #FF0000; font-size: 1.2em;">${finalDamage.toFixed(2)}</span></strong></p>`;
    } else {
        const healingAmount = Math.abs(finalDamage);
        resultHTML += `
            <p><strong>Nh√¢n v·∫≠t ph·ª•c h·ªìi: <span style="color: #00AA00; font-size: 1.2em;">${healingAmount.toFixed(2)} HP</span></strong></p>
            <p style="color: #0000FF;"><em>L∆∞u √Ω: HP ph·ª•c h·ªìi v·∫´n tu√¢n theo healing limit m·ªói turn.</em></p>
        `;
    }

    const resultElement = document.getElementById('calculation-result');
    if (resultElement) {
        resultElement.innerHTML = resultHTML;
        resultElement.style.display = 'block';
    }
}

// ƒê·∫£m b·∫£o r·∫±ng h√†m c√≥ th·ªÉ ƒë∆∞·ª£c g·ªçi t·ª´ b√™n ngo√†i
window.initDamageReceivedForm = initDamageReceivedForm;

function getElementName(element) {
    const elementNames = {
        'Force': 'Force',
        'Flame': 'Flame',
        'Aqua': 'Aqua',
        'Gale': 'Gale',
        'Terra': 'Terra',
        'Holy': 'Holy',
        'Shadow': 'Shadow'
    };
    return elementNames[element] || element;
}